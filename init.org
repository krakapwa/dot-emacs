#+TITLE:       Emacs configuration
#+AUTHOR:      Laurent Lejeune
* Meta
All changes to the configuration should be done in =init.org=, not in =init.el=. Any changes in the init.el will be overwritten by saving =init.org=. The =init.el= in this repo should not be tracked by git, and is replaced the first time Emacs is started (assuming it has been renamed to =~/.emacs.d=).

Emacs canâ€™t load .org-files directly, but org-mode provides functions to extract the code blocks and write them to a file.

When this configuration is loaded for the first time, the =init.el= is the file that is loaded. It looks like this:

#+begin_src emacs-lisp :tangle no
;; This file replaces itself with the actual configuration at first run.

;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))#+end_src
#+end_src
It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
   git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
   git update-index --no-assume-unchanged init.el
   #+END_SRC

   I want lexical scoping for the init-file, which can be specified in the
   header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
   ;;; -*- lexical-binding: t -*-
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

#+begin_src emacs-lisp :tangle yes
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)

#+end_src
* Packages
  This is where the mirrors and their priorities are set up.

#+begin_src emacs-lisp :tangle yes

(require 'package)
(setq load-prefer-newer t
      package-enable-at-startup nil
      package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("elpy" . "https://jorgenschaefer.github.io/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("stable-melpa" . "https://stable.melpa.org/packages/")
        ("myelpa" . "https://raw.githubusercontent.com/lejeunel/myelpa/master/"))
      package-archive-priorities
            '(("gnu" . 5)
              ("melpa"     . 0)
              ("myelpa"     . 10)
              ("stable-melpa"     . 0)
              ("org"     . 0)
              ("elpy"        . 0)))
(package-initialize nil)

(require 'cl)
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

(setq use-package-verbose t
      use-package-always-ensure t)

(eval-when-compile
  (require 'use-package))

(defconst user-init-dir
  (cond ((boundp 'user-emacs-directory)
         user-emacs-directory)
        ((boundp 'user-init-directory)
         user-init-directory)
        (t "~/.emacs.d/")))

(use-package diminish
    :ensure t)
#+end_src
** Elpa-mirror
=M-x elpamr-create-mirror-for-installed= to create local repository.
To change output directory,
#+begin_src emacs-lisp :tangle yes
(setq elpamr-default-output-directory "~/myelpa")
#+end_src

#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "~/.emacs.d/site-lisp/elpa-mirror")
(require 'elpa-mirror)
#+end_src
* Yasnippet
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
; autoload `yasnippet' when `yas-minor-mode' is called
; using any means: via a hook or by user
; Feel free to add more commands to this
; list to suit your needs.
    :diminish yas-minor-mode
  :commands (yas-minor-mode yas-exapand yas-insert-snippet)
  :init ; stuff to do before requiring the package
  (progn
    (add-hook 'python-mode-hook #'yas-minor-mode)
    (add-hook 'org-mode-hook #'yas-minor-mode)
    (add-hook 'inferior-python-mode-hook #'yas-minor-mode))
  ;;(progn
  ;;  )
  :diminish evil-commentary-mode
  :config ; stuff to do after requiring the package
  (progn
    (yas-reload-all)
    (add-to-list 'yas-snippet-dirs "$HOME/.emacs.d/snippets")
    (add-to-list 'yas-snippet-dirs "$HOME/.emacs.d/yasnippet-snippets"))
    (yas-global-mode t))
#+end_src
* Evil
#+begin_src emacs-lisp :tangle yes
(setq evil-want-C-i-jump nil)
(use-package evil
  :defines evil-disable-insert-state-bindings
  :init
(progn
    (evil-mode t)
    (setq evil-want-fine-undo 'no
            evil-want-C-u-scroll t
            evil-want-C-d-scroll t
            evil-symbol-word-search t
            evil-cross-lines t
            evil-disable-insert-state-bindings t)
            (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
        (define-key Info-mode-map "g" nil)
    (use-package evil-org
    :init (add-hook 'org-mode-hook 'evil-org-mode)
    :diminish evil-org-mode
    :config  (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))))
  :config
    (add-hook 'git-commit-mode-hook 'evil-insert-state)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  ;; Relative line numbering
  (use-package rainbow-delimiters
    :ensure t
    :init)

  ;; Relative line numbering
  (use-package linum-relative
    :ensure t
    :init
    (progn
      (setq linum-relative-format "%3s ")
      (setq linum-relative-current-symbol "")))
  ;; Highlight indent
  (use-package highlight-indent-guides
    :ensure t
    :init
    (progn
      (setq linum-relative-format "%3s ")
      (linum-mode)
      (linum-relative-mode)
      (setq highlight-indent-guides-method 'column))
    :diminish highlight-indent-guides-mode)
  (use-package hlinum
    :ensure t
    :init
    (hlinum-activate)
  )
  (use-package paren
    :ensure t
    :init
    (progn
      (setq show-paren-style 'parenthesis)
      (show-paren-mode +1)
      )))

(with-eval-after-load 'comint
    (define-key comint-mode-map "\C-d" nil))

(defun evil-shift-left-visual ()
  (interactive)
  (evil-shift-left (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

(defun evil-shift-right-visual ()
  (interactive)
  (evil-shift-right (region-beginning) (region-end))
  (evil-normal-state)
(evil-visual-restore))

(define-key evil-visual-state-map (kbd ">") 'evil-shift-right-visual)
(define-key evil-visual-state-map (kbd "<") 'evil-shift-left-visual)
(define-key evil-visual-state-map [tab] 'evil-shift-right-visual)
(define-key evil-visual-state-map [S-tab] 'evil-shift-left-visual)
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)


(use-package evil-anzu)

(use-package evil-commentary
  :diminish evil-commentary-mode
  :config (evil-commentary-mode))

(use-package undo-tree
    :diminish undo-tree-mode
    :init (global-undo-tree-mode))

(use-package ediff
  :ensure nil
  :defer t
  :config (use-package evil-ediff))

(use-package evil-escape
  :diminish evil-escape-mode
  :config
  (evil-escape-mode))

(use-package evil-matchit
  :config (global-evil-matchit-mode))

(use-package evil-snipe
  :diminish evil-snipe-mode
  :init (evil-snipe-mode)
)

(use-package evil-surround
  :config (global-evil-surround-mode))

(use-package evil-visualstar
  :init (global-evil-visualstar-mode))

;; key bindings
(use-package general
  :config
  ;; global keys
  (general-define-key
   :states '(insert)
   "M-y" 'helm-show-kill-ring))

;; projectile
(use-package projectile
  :ensure projectile
  :diminish projectile-mode
  :config
  (setq projectile-enable-caching t
        projectile-global-mode t
        projectile-completion-system 'helm
        projectile-switch-project-action 'helm-projectile)
  (projectile-mode)
  )

(use-package helm-projectile
  :ensure t
  :general
    (:keymaps 'projectile-mode-map
     :states '(normal visual emacs)
     :prefix "SPC"
     :which-key "projectile"
     "pf" 'helm-projectile-find-file
     "pa" 'helm-projectile-ag
     "pg" 'helm-projectile-grep
     "ps" 'helm-projectile-switch-project)
  :init
    (helm-projectile-on))
#+end_src
* Helm
#+begin_src emacs-lisp :tangle yes
(use-package helm
  :ensure helm
  :diminish helm-mode
  :config
  (require 'helm-config)
  (general-define-key
   :keymaps 'helm-map
   "C-c !" 'helm-toggle-suspend-update
   "<tab>" 'helm-execute-persistent-action
   "C-i" 'helm-execute-persistent-action
   "C-z" 'helm-select-action)
  (global-unset-key (kbd "C-x c"))
  :init (progn
               (require 'helm-config)
               (helm-mode t)

                (use-package helm-themes   :ensure t :defer 5)
                (use-package helm-ag
                    :commands (helm-ag)
                    :config
                    ;; fix https://github.com/bbatsov/projectile/issues/837
                    (setq grep-find-ignored-files nil
                            grep-find-ignored-directories nil))
                (use-package helm-descbinds
                :config (helm-descbinds-mode))

                (use-package helm-gitignore)))
#+end_src

* Appearance
To get smooth fonts, set hinting full...
#+begin_src bash :tangle no
cd /etc/fonts/conf.d
sudo rm 10-hint*
sudo ln -s ../10-hinting-full.conf
#+end_src

This sets the window title to buffer name. Use =%f= for full path.
#+begin_src emacs-lisp :tangle yes
(setq-default frame-title-format '("%b"))
#+end_src
** Colors for dired, helm, etc..
Colors can be displayed with =M-x list-faces-display=
#+begin_src emacs-lisp :tangle yes
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
;;'(dired-directory ((t (:foreground "sky blue"))))
;;'(dired-symlink ((t (:foreground "cyan"))))
;;'(helm-ff-file ((t (:foreground "white"))))
;;'(helm-ff-symlink ((t (:foreground "cyan"))))
;;'(helm-buffer-directory ((t (:foreground "sky blue"))))
;;'(helm-buffer-file ((t (:foreground "white"))))
;;'(helm-selection ((t (:inherit bold :background "dark violet" :foreground "white" :weight bold))))
'(minibuffer-prompt ((t (:background "#282a36" :foreground "sky blue" :box nil))))
 )

#+end_src

** Themes
#+begin_src emacs-lisp :tangle yes
  (use-package powerline
  :if window-system
:config (setq-default powerline-default-separator 'nil))

;; (set-face-attribute 'default nil :font "Source Code Pro Medium-12")
;; (set-face-attribute 'default nil :font "DejaVu Sans Mono for Powerline-12")
;; (set-face-attribute 'default nil :font "Inconsolata for Powerline-12")
(set-face-attribute 'default nil :font "Hack-12")

;;(use-package apropospriate-theme
;;  :ensure t
;;  :config
;;  (load-theme 'apropospriate-dark t))

(use-package airline-themes
  :init
  (progn
    (require 'airline-themes)
    (load-theme 'airline-doom-one t))
  :config
  (progn
    (set-face-attribute 'mode-line          nil :font "Fira Mono for Powerline")
    (set-face-attribute 'mode-line-inactive nil :font "Fira Mono for Powerline")
    (setq powerline-utf-8-separator-left        #xe0b0
          powerline-utf-8-separator-right       #xe0b2
          airline-utf-glyph-separator-left      #xe0b0
          airline-utf-glyph-separator-right     #xe0b2
          airline-utf-glyph-subseparator-left   #xe0b1
          airline-utf-glyph-subseparator-right  #xe0b3
          airline-utf-glyph-branch              #xe0a0
          airline-utf-glyph-readonly            #xe0a2
airline-utf-glyph-linenumber #xe0a1)))

(use-package doom-themes
  :init
  (load-theme 'doom-dracula t)
  :config
  (progn
    (doom-themes-neotree-config)

(doom-themes-org-config)))
  (global-linum-mode t)
  (global-visual-line-mode 1)
  (diminish 'visual-line-mode)
  (diminish 'hi-lock-mode)
  (diminish 'evil-snipe-local-mode)

  ;;Maximize on startup
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (global-hl-line-mode +1)
  (blink-cursor-mode 0)
  (set-cursor-color "#f4d942")

  ;;; appearance
  (if (display-graphic-p)
      (progn
        (tool-bar-mode 0)
        (scroll-bar-mode 0)))

  ;; more context when scrolling
  (setq next-screen-context-lines 4)

  ;; y/n for yes/no
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; start week on Monday
  (setq calendar-week-start-day 1)

  ;; window undo/redo
  (winner-mode)

  ;; tabs are truly evil
  (setq-default indent-tabs-mode nil)

  ;; sentences end with one space
  (setq sentence-end-double-space nil)

  ;;; settings
  ;; enable all commands
  (setq disabled-command-function nil)

  ;; default truncate lines
  (setq-default truncate-lines t)

  ;; disable bell
  (setq ring-bell-function 'ignore
        visible-bell t)

  ;; increase garbage collection threshold
  (setq gc-cons-threshold (* 10 1024 1024))

  ;; inhibit startup message
  (setq inhibit-startup-message t)

  ;; kill settings
  (setq save-interprogram-paste-before-kill t
        kill-do-not-save-duplicates t
        kill-whole-line t)

  ;; repeat mark pop
  (setq-default set-mark-command-repeat-pop t)

  ;; set terminfo
  (setq system-uses-terminfo nil)

  ;;; extensions
  ;; adaptive word wrapping
  (use-package adaptive-wrap
    :config (adaptive-wrap-prefix-mode)
    :diminish adaptive-wrap-prefix-mode
  )

    ;; which-key
    (use-package which-key
    :diminish which-key-mode
    :config (which-key-mode))
#+end_src
* Org
#+begin_src emacs-lisp :tangle yes
;; org mode extensions

(use-package org
  :general
  (:keymaps 'org-mode-map
    :states '(normal insert emacs)
    :major-mode 'org-mode
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    :which-key "org"
    "me" 'org-export-dispatch))

;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) https://stackoverflow.com/a/8836108/789593
(add-hook 'org-mode-hook
      '(lambda ()
         (delete '("\\.pdf\\'" . default) org-file-apps)
         (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))

(setq org-reveal-root "~/.dotfiles/reveal.js/")
(setq org-reveal-mathjax t)
(setq org-src-fontify-natively t)

(use-package htmlize
:ensure t)

;; git
(use-package git-timemachine)

(menu-bar-mode -1)

#+end_src
* Python
#+begin_src emacs-lisp :tangle yes
; Highlight the call to pdb
(defun annotate-pdb ()
  (interactive)
    (highlight-lines-matching-regexp "^[ ]*import pdb; pdb.set_trace()"))
(add-hook 'python-mode-hook 'annotate-pdb)

(use-package elpy
  :defer t
  :ensure t
  :commands elpy-enable
  :init (with-eval-after-load 'python (elpy-enable))

  :config
  (highlight-lines-matching-regexp "^[ ]*import pdb; pdb.set_trace()")
  (electric-indent-local-mode -1)
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (delete 'elpy-module-flymake elpy-modules)

  (defun python-rerun-master-file ()
    (interactive)
    (python-switch-to-master-file)
    (elpy-shell-send-region-or-buffer))

  (defun python-run-master-file ()
    (interactive)
    (python-switch-to-master-file)
    (elpy-shell-send-region-or-buffer))

  (defun python-set-master-file ()
    (interactive)
    (setq python-master-file (buffer-name))
    (message "Set this buffer as python master file"))

  (defun python-switch-to-master-file ()
    (interactive)
    (switch-to-buffer python-master-file))

  (defun python-add-breakpoint ()
    "Add a break point"
    (interactive)
    (evil-open-above 1)
    (insert "import pdb; pdb.set_trace()")
    (evil-escape)
    (highlight-lines-matching-regexp "^[ ]*import pdb; pdb.set_trace()"))

      :diminish elpy-mode

)

  (defun ha/elpy-goto-definition ()
    (interactive)
    (condition-case err
        (elpy-goto-definition)
      ('error (xref-find-definitions (symbol-name (symbol-at-point))))))

(use-package pyenv-mode
  :defer t
  :ensure t
  :config
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name."
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset))))

    (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)
    (add-hook 'python-mode-hook 'pyenv-mode))

(use-package company-jedi
  :ensure t
  :init
  ;(setq company-jedi-python-bin "python2")
  :config
  (add-to-list 'company-backends 'company-jedi))

(use-package window-purpose
:diminish purpose-mode)

(purpose-mode)
(add-to-list 'purpose-user-mode-purposes '(python-mode . py))
(add-to-list 'purpose-user-mode-purposes '(inferior-python-mode . py-repl))
(purpose-compile-user-configuration)

(use-package python
  :defer t
  :general
  (:keymaps 'python-mode-map
    :states '(normal visual emacs)
    :major-mode 'python-mode
    :prefix "SPC"
    :which-key "Python"
    "mv" 'pyenv-mode-set
    "mb" 'elpy-shell-send-region-or-buffer
    "ms" 'python-set-master-file
    "mm" 'python-switch-to-master-file
    "mr" 'python-run-master-file
    "md" 'python-add-breakpoint
    "mg" 'elpy-goto-definition
    "mf" 'elpy-yapf-fix-code
    "mh" 'elpy-doc
    "mi" 'run-python))

(general-define-key :states '(normal insert emacs)
                    :major-mode 'inferior-python-mode
                    :keymaps 'inferior-python-mode-map
                    "C-r" 'comint-history-isearch-backward
                    "C-k" 'comint-previous-input
                    "C-j" 'comint-next-input)

(setq python-shell-interpreter "ipython"
    python-shell-interpreter-args "--simple-prompt -i")

(with-eval-after-load 'python
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))

#+end_src
* C/C++
#+begin_src emacs-lisp :tangle yes
(defun setup-flycheck-rtags ()
  (interactive)
  (flycheck-select-checker 'rtags)
  ;; RTags creates more accurate overlays.
  (setq-local flycheck-highlighting-mode nil)
  (setq-local flycheck-check-syntax-automatically nil))

(use-package rtags
  :ensure t
  :general
  (:keymaps 'c-mode-map
    :states '(normal visual emacs)
    :major-mode 'c-mode
    :prefix "SPC"
    :which-key "C/C++"
    "ms" 'rtags-find-symbol-at-point
    "mr" 'rtags-find-references-at-point)
  :diminish rtags
  :config
  (progn
    (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
    (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)

    (setq rtags-autostart-diagnostics t)
    (rtags-diagnostics)
    (setq rtags-completions-enabled t)
    (setq rtags-use-helm t)

    (use-package flycheck-rtags
      :ensure t
      :config
      (progn
	(defun my-flycheck-setup ()
	  (flycheck-select-checker 'rtags))
	(add-hook 'c-mode-hook #'my-flycheck-setup)
	(add-hook 'c++-mode-hook #'my-flycheck-setup))
      )
    (use-package company-rtags
      :ensure t
      :config
      (progn
    	(require 'company)
        (add-to-list 'company-backends 'company-rtags)
    	))
    )
)
(add-hook 'c-mode-common-hook #'setup-flycheck-rtags)
#+end_src
* Tex
#+begin_src emacs-lisp :tangle yes
(use-package tex
:ensure auctex
:general
(:keymaps 'LaTeX-mode-map
  :states '(normal emacs)
  :major-mode 'LaTeX-mode
  :prefix "SPC"
  :which-key "Latex"
    "mm" 'TeX-command-master
    "mv" 'TeX-command-run-all
    "mp" 'preview-at-point
  )
:init
(progn (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
:config
(setq reftex-ref-macro-prompt nil)
(progn
  (use-package auto-complete
    :config
    (progn
      (ac-flyspell-workaround)
      (setq ac-auto-show-menu 0.01
            ac-auto-start 1
            ac-delay 0.01)))

  (use-package ispell
    :ensure t
    :config
    (progn
      (make-local-variable 'ispell-parser)
      (setq ispell-parser 'tex)))

  (use-package ac-ispell
    :ensure t
    :requires auto-complete ispell
    )

  (use-package writegood-mode
    :ensure t
    :config
    (writegood-mode))

  (use-package smartparens-latex
    :disabled t ;; Does not seem to be available
    :ensure t
    :config
    (smartparens-mode +1))

  (use-package ac-math
    :ensure t)
(setq Tex-auto-save t)
(setq Tex-parse-self t)
(setq TeX-save-query nil)
(setq reftex-plug-into-AUCTeX t)))

(use-package company-auctex
  :ensure t
  :config
  (company-auctex-init)
)

(use-package reftex
  :diminish reftex-mode
  :commands turn-on-reftex
  :init
  (progn
  (setq reftex-plug-into-AUCTeX t))
  :config
  (general-define-key
   :keymaps 'LaTeX-mode-map
    :states '(normal emacs)
    :major-mode 'LaTeX-mode
    :prefix "SPC"
    :which-key "Latex"
   "mrc" 'helm-bibtex-with-local-bibliography
   "mrg"    'reftex-grep-document
   "mri"    'reftex-index-selection-or-word
   "mrI"    'reftex-display-index
   "mr TAB" 'reftex-index
   "mrl"    'reftex-label
   "mrp"    'reftex-index-phrase-selection-or-word
   "mrP"    'reftex-index-visit-phrases-buffer
   "mrr"    'reftex-reference
   "mrt"    'reftex-toc
   "mrT"    'reftex-toc-recenter
   "mrv" 'reftex-view-crossref)
  (reftex-mode))

(which-key-add-key-based-replacements
    "SPC mr" "reftex"
 )
#+end_src
* Define keys
#+begin_src emacs-lisp :tangle yes
;Single escape to exit "everything"
(global-set-key (kbd "<escape>")      'keyboard-escape-quit)

(general-define-key
 :states '(normal visual)
 :prefix "SPC"
       "ff" 'helm-find-files ; save windows layout
       "fs" 'save-buffer
       "tw" 'whitespace-mode
       "qr" 'restart-emacs
       "wv" 'split-window-right
       "wf" 'split-window-fairly
       "wd" 'delete-window
       "TAB" '(ace-window :which-key "next window")
       "s" '(ace-swap-window :which-key "swap windows")
       "b" 'helm-mini
       "x" 'kill-this-buffer
       "r" 'ranger
       "af" 'ag-dired
       "as" 'helm-ag-project-root
       "y" 'yas-insert-snippet
       "gs" '(magit-status :which-key "git status")
       "gf" '(with-editor-finish :which-key "git finish")
       "gtt" 'git-timemachine-toggle
       "gtn" 'git-timemachine-show-next-revision
       "gtp" 'git-timemachine-show-previous-revision
       "gtq" 'git-timemachine-quit
        "zi" 'default-text-scale-increase
        "zd" 'default-text-scale-decrease
        "e" '(my/switch-to-buffer/body :which-key "buffer")
)

(which-key-add-key-based-replacements
    "SPC gt" "git timemachine"
    "SPC g" "git"
    "SPC f" "file"
    "SPC a" "ag"
    "SPC t" "toggle"
    "SPC b" "buffer"
    "SPC w" "window"
    "SPC m" "major-mode"
 )

(require 'general)
(general-evil-setup t)


(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)



;;; provide init package
(provide 'init)

;;; init.el ends here
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    (default)))
 '(evil-symbol-word-search t)
 '(package-selected-packages
   (quote
    (iflipb iflibp buffer-stack hlinum rainbow-delimiters rainbow-delimiters-mode dashboard page-break-lines window-purpose dedicated latex-mode latex tex git-timemachine ranger elpy evil-magit znc yaml-mode whitespace-cleanup-mode which-key virtualenvwrapper use-package unfill try toml-mode ssh-config-mode smooth-scroll sly scratch savekill rust-mode regex-tool puppet-mode processing-mode powershell powerline popwin pkgbuild-mode nginx-mode matlab-mode markdown-mode magit less-css-mode ledger-mode org-plus-contrib java-snippets helm-gitignore helm-descbinds helm-company helm-ag haskell-mode handlebars-mode gnuplot gitconfig-mode ggtags general fortune-cookie flycheck f evil-visualstar evil-surround evil-snipe evil-smartparens evil-matchit evil-escape evil-easymotion evil-commentary evil-anzu electric-spacing dtrt-indent dockerfile-mode docker demangle-mode csharp-mode company-c-headers cmake-mode bison-mode auto-compile ag adaptive-wrap ace-window pyenv-mode)))
 '(split-height-threshold nil)
 '(split-width-threshold 0))
#+end_src
* Hydras
#+begin_src emacs-lisp :tangle yes
(use-package hydra
    :ensure
    :config

        (defun my/name-of-buffers (n)
        "Return the names of the first N buffers from `buffer-list'."
        (let ((bns
                (delq nil
                    (mapcar
                        (lambda (b)
                        (unless (string-match "^ " (setq b (buffer-name b)))
                            b))
                        (buffer-list)))))
            (subseq bns 1 (min (1+ n) (length bns)))))

        ;; Given ("a", "b", "c"), return "1. a, 2. b, 3. c".
        (defun my/number-names (list)
        "Enumerate and concatenate LIST."
        (let ((i 0))
            (mapconcat
            (lambda (x)
            (format "%d. %s" (cl-incf i) x))
            list
            ", ")))

        (defvar my/last-buffers nil)

        (defun my/switch-to-buffer (arg)
        (interactive "p")
        (switch-to-buffer
        (nth (1- arg) my/last-buffers)))

        (defun my/switch-to-buffer-other-window (arg)
        (interactive "p")
        (switch-to-buffer-other-window
        (nth (1- arg) my/last-buffers)))

        (defhydra my/switch-to-buffer (:exit t
                                        :body-pre (setq my/last-buffers
                                                        (my/name-of-buffers 4)))
        "
        _o_ther buffers: %s(my/number-names my/last-buffers)

        "
        ("o" my/switch-to-buffer "this window")
        ("O" my/switch-to-buffer-other-window "other window")
        ("<escape>" nil))

)
#+end_src
* Others
** Restart emacs
#+begin_src emacs-lisp :tangle yes
(use-package restart-emacs
    :ensure t)
#+end_src
** Yaml
#+begin_src emacs-lisp :tangle yes
;; yaml
(use-package yaml-mode
:mode "\\.ya?ml\'")
#+end_src
** Anzu
anzu.el provides a minor mode which displays current match and total matches information in the mode-line in various search modes.
#+begin_src emacs-lisp :tangle yes

;; anzu
(use-package anzu
:commands (isearch-foward isearch-backward)
:config (global-anzu-mode)
:diminish anzu-mode
)

#+end_src
** Company
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
#+begin_src emacs-lisp :tangle yes

(use-package company
:diminish company-mode
:commands (company-complete company-mode)
:config
  (use-package company-c-headers))

(with-eval-after-load 'company
(global-company-mode)
(define-key company-active-map (kbd "C-j") #'company-select-next)
(define-key company-active-map (kbd "C-k") #'company-select-previous))

(use-package helm-company
  :ensure t
  :config
  (general-define-key
   :states '(insert)
   "TAB" 'helm-company))

(setq company-backends
      '((company-files          ; files & directory
         company-keywords       ; keywords
         company-capf
         company-yasnippet
         )
        (company-abbrev company-dabbrev)
        ))
#+end_src
** Demangle
demangle-mode is an Emacs minor mode that automatically demangles C++ symbols.
Use M-x demangle-mode to toggle demangling on or off in any buffer. Turn on font-lock-mode as well: demangle-mode uses this to stay in sync as buffer contents change.
#+begin_src emacs-lisp :tangle yes
;; automatic demangling
(use-package demangle-mode
:commands demangle-mode)
#+end_src

** Dtrt
A minor mode that guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.
#+begin_src emacs-lisp :tangle yes
(use-package dtrt-indent
:ensure t
:commands dtrt-indent-mode
:defer 3
:config
(progn
(dtrt-indent-mode 1)
(setq global-mode-string (--remove (eq it 'dtrt-indent-mode-line-info) global-mode-string))))

#+end_src

** Flycheck/Flyspell
On the fly syntax/spelling checking.
#+begin_src emacs-lisp :tangle yes

;; flycheck
(use-package flycheck
:diminish flycheck-mode
:init (global-flycheck-mode))

;; flyspell - use aspell instead of ispell
(use-package flyspell
:commands (flyspell-mode flyspell-prog-mode)
:config (setq ispell-program-name (executable-find "aspell")
            ispell-extra-args '("--sug-mode=ultra")))

#+end_src

** GGtags
Emacs frontend to GNU Global source code tagging system
#+begin_src emacs-lisp :tangle yes

;; ggtags
(use-package ggtags
:commands ggtags-mode
:diminish ggtags-mode
:config
(general-define-key
:keymaps 'ggtags-mode-map
:states '(normal)
"g d" 'helm-gtags-dwim)
(use-package helm-gtags
:commands (helm-gtags-dwim)
:config (helm-gtags-mode)))


#+end_src

** Magit
Magit is an interface to the version control system Git, implemented as an Emacs package.
#+begin_src emacs-lisp :tangle yes
;; magit
(use-package magit
:commands (magit-status projectile-vc)
:config
(use-package evil-magit)
(add-to-list 'magit-log-arguments "--no-abbrev-commit")
(setq magit-popup-use-prefix-argument 'default))

(global-git-commit-mode)

#+end_src

** Popwin
Popwin is a popup window manager for Emacs which makes you free from the hell of annoying buffers such like *Help*, *Completions*, *compilation*, and etc.
#+begin_src emacs-lisp :tangle yes
;; popwin
(use-package popwin
:config (popwin-mode))

;; save kill ring
(use-package savekill)

;; scratch
(use-package scratch
:commands (scratch))

;; slime
(use-package sly
:commands (sly)
:config (setq inferior-lisp-program (executable-find "sbcl")))

#+end_src

** Tramp
Tramp stands for `Transparent Remote (file) Access, Multiple Protocol'.
From find-file, enter
#+begin_verse
/ssh:username@domain:/home/username/myfile
#+end_verse

#+begin_src emacs-lisp :tangle yes
;; tramp
(use-package tramp
:config
(setq tramp-verbose 9
    tramp-default-method "ssh"
    tramp-ssh-controlmaster-options
    (concat "-o ControlPath=/tmp/tramp.%%r@%%h:%%p "
            "-o ControlMaster=auto "
            "-o ControlPersist=no")))

#+end_src
** Uniquify
The library uniquify overrides Emacsâ€™ default mechanism for making buffer names unique (using suffixes like <2>, <3> etc.) with a more sensible behaviour which use parts of the file names to make the buffer names distinguishable.
#+begin_src emacs-lisp :tangle yes
(use-package uniquify
:ensure nil
:config (setq uniquify-buffer-name-style 'forward))
#+end_src
** Whitespace
This package is a minor mode to visualize blanks (TAB, (HARD) SPACE and NEWLINE).
#+begin_src emacs-lisp :tangle yes
;; whitespace
(use-package whitespace
:commands (whitespace-mode)
:config
(setq whitespace-style '(face tabs spaces newline empty
                            trailing tab-mark newline-mark)))

(use-package whitespace-cleanup-mode
:diminish whitespace-cleanup-mode
:init (global-whitespace-cleanup-mode))

#+end_src
** Ranger
#+begin_src emacs-lisp :tangle yes
(use-package ranger
:ensure t
:defer t
:commands (ranger)
:config
(require 'cl-lib)
(setq ranger-cleanup-eagerly t)
(setq ranger-show-hidden nil)
)
#+end_src
** Markdown
#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
:mode ("\\.markdown\\'" "\\.mk?d\\'" "\\.text\\'")
:general
(:keymaps 'markdown-mode-map
:states '(normal visual emacs)
:major-mode 'markdown-mode
:prefix "SPC"
:which-key "Markdown"
"mj" 'markdown-do
"mp" 'markdown-export-and-preview
"me" 'markdown-export
"mx" 'markdown-follow-link-at-point))
#+end_src
** Ag (silver-searcher)
#+begin_src emacs-lisp :tangle yes
(use-package ag
:commands (ag ag-files ag-regexp ag-project ag-dired helm-ag helm-projectile-ag)
:config (setq ag-highlight-search t
            ag-reuse-buffers t))
#+end_src
** Fill column indicator
#+begin_src emacs-lisp :tangle yes
(use-package fill-column-indicator
:init
(turn-on-fci-mode)
(fci-mode t)

(setq-default fill-column 80)
(defun jcf-fci-enabled-p ()
(and (boundp 'fci-mode) fci-mode))

(defvar jcf-fci-mode-suppressed nil)

(defadvice popup-create (before suppress-fci-mode activate)
"Suspend fci-mode while popups are visible"
(let ((fci-enabled (jcf-fci-enabled-p)))
    (when fci-enabled
    (set (make-local-variable 'jcf-fci-mode-suppressed) fci-enabled)
    (turn-off-fci-mode))))

(defadvice popup-delete (after restore-fci-mode activate)
"Restore fci-mode when all popups have closed"
(when (and jcf-fci-mode-suppressed
            (null popup-instances))
    (setq jcf-fci-mode-suppressed nil)
    (turn-on-fci-mode))

(defadvice enable-theme (after recompute-fci-face activate)
    "Regenerate fci-mode line images after switching themes"
    (dolist (buffer (buffer-list))
    (with-current-buffer buffer
        (turn-on-fci-mode))))))

(add-hook 'python-mode-hook (lambda ()
                            (fci-mode)
                            (set-fill-column 80)))

(add-hook 'org-mode-hook (lambda ()
                            (fci-mode)
                            (set-fill-column 80)))
#+end_src
** Others
#+begin_src emacs-lisp :tangle yes
;; xdg-open won't work without this
(setq process-connection-type nil)

  (use-package default-text-scale
    :ensure t)

;;(use-package smooth-scroll
;;:if (display-graphic-p)
;;:diminish smooth-scroll-mode
;;:config
;;(setq smooth-scroll/vscroll-step-size 8)
;;(smooth-scroll-mode))

;; unfill autofill
(use-package unfill
:commands (unfill-region unfill-paragraph unfill-toggle))


;;; syntax support
;; mode mappings
(add-to-list 'auto-mode-alist '("\\.ino\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.vcsh\\'" . conf-mode))
(add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
(add-to-list 'magic-mode-alist '(";;; " . emacs-lisp-mode))

;; CMake
(use-package cmake-mode
:mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))

;; git modes
(use-package gitattributes-mode
:disabled t)
(use-package gitconfig-mode
:mode ("/\\.gitconfig\\'" "/\\.git/config\\'" "/git/config\\'" "/\\.gitmodules\\'"))
(use-package gitignore-mode
:mode ("/\\.gitignore\\'" "/\\.git/info/exclude\\'" "/git/ignore\\'"))

;; json
(use-package json-mode
:mode "\\.json$"
:config (setq js-indent-level 4))

;; ledger
(use-package ledger-mode
:mode "\\.ledger\\'"
:config
(define-key ledger-mode-map (kbd "C-c c") 'ledger-mode-clean-buffer)
(setq ledger-post-amount-alignment-at :decimal
    ledger-post-amount-alignment-column 49
    ledger-clear-whole-transactions t)
(use-package flycheck-ledger))

;; less-css
(use-package less-css-mode
:mode "\\.less\\'")


;; matlab
(use-package matlab-mode
:mode "\\.m$")

;; nginx
(use-package nginx-mode
:mode ("nginx.conf$" "/etc/nginx/.*"))
;; packages used in init
(use-package page-break-lines)
#+end_src

#+begin_src emacs-lisp :tangle yes

(use-package dashboard
:config
(dashboard-setup-startup-hook))

(use-package dash)
(use-package f)

(use-package auto-compile
:defer t
:config
(auto-compile-on-load-mode)
(auto-compile-on-save-mode))

(use-package ace-window
:config
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

;;; files
;; backups
(setq backup-by-copying t
    delete-old-versions t
    kept-new-versions 4
    kept-old-versions 2
    version-control t
    backup-directory-alist `(("." . ,(f-expand
                                    "backups" user-emacs-directory))))
;; 100 MB
(setq large-file-warning-threshold (* 100 1000 1000))

;; recent files
(setq recentf-max-saved-items 256
    recentf-max-menu-items 16)
(recentf-mode)

;; set auto revert of buffers if file is changed externally
(global-auto-revert-mode)

;; symlink version-control follow
(setq vc-follow-symlinks t)

;; dired
(setq dired-dwim-target t ; enable side-by-side dired buffer targets
    dired-recursive-copies 'always ; better recursion in dired
    dired-recursive-deletes 'top
    dired-listing-switches "-lahp")

;; compilation
(setq compilation-ask-about-save nil
    compilation-always-kill t)


(use-package iflipb
:general
(
:states '(normal)
:config
  (defun swap-buffer-window ()
    "Put the buffer from the selected window in next window, and vice versa"
    (interactive)
    (let* ((this (selected-window))
      (other (next-window))
      (this-buffer (window-buffer this)))
      (set-window-buffer other this-buffer)
      (iflipb-next-buffer 1) ;;change current buffer
      (other-window 1) ;;swap cursor to new buffer
      )
    )

:prefix "SPC"
"k" 'iflipb-next-buffer
"j" 'iflipb-previous-buffer
"d" 'swap-buffer-window))

(setq iflipb-ignore-buffers '("magit" "^[*]"))
#+end_src
